{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Samvaad An intelligent speech to text conversion pipeline Introduction Samvaad's developer documentation is meant for its adopters, developers and contributors. Getting started Samvaad is an open-source platform, you are free to use any programming language to extend or customize it. To try the Samvaad APIs, a basic understanding of REST APIs and a knowledge of object-oriented design principles is a plus, though not necessary. The Developer documentation provides you with a complete set of guidelines which you need to: Install Samvaad Configure Samvaad Customize Samvaad Extend Samvaad Contribute to Samvaad Installation","title":"Home"},{"location":"#welcome-to-samvaad","text":"An intelligent speech to text conversion pipeline","title":"Welcome to Samvaad"},{"location":"#introduction","text":"Samvaad's developer documentation is meant for its adopters, developers and contributors.","title":"Introduction"},{"location":"#getting-started","text":"Samvaad is an open-source platform, you are free to use any programming language to extend or customize it. To try the Samvaad APIs, a basic understanding of REST APIs and a knowledge of object-oriented design principles is a plus, though not necessary. The Developer documentation provides you with a complete set of guidelines which you need to: Install Samvaad Configure Samvaad Customize Samvaad Extend Samvaad Contribute to Samvaad","title":"Getting started"},{"location":"#installation","text":"","title":"Installation"},{"location":"CONTRIBUTING/","text":"Contributing to this project Contributors Agreement Introduction I don't want to read this whole thing I just have a question!!! How Can I Contribute? Reporting Bugs Suggesting Enhancements Creating Pull Requests Contributors Agreement By submitting patches to this project you agree to allow them to be redistributed under the project's license, according to the normal forms and usages of the open-source community. Introduction First off, thank you for considering contributing to this project. It's people like you that make it such a great tool. Following these guidelines helps to communicate that you respect the time of the developers managing and developing this open source project. In return, they should reciprocate that respect in addressing your issue, assessing changes, and helping you finalize your pull requests. This is an open source project and we love to receive contributions from our community \u2014 you! There are many ways to contribute, from writing tutorials or blog posts, improving the documentation, submitting bug reports and feature requests or writing code which can be incorporated into the main project itself. I don't want to read this whole thing I just have a question!!! We currently allow our users to use the issue tracker for support questions. But please be wary that maintaining an open source project can take a lot of time from the maintainers. If asking for a support question, state it clearly and take the time to explain your problem properly. Also, if your problem is not strictly related to this project we recommend you to use Stack Overlow instead. How Can I Contribute? Reporting Bugs Before creating bug reports, please check the existing bug reports as you might find out that you don't need to create one. When you are creating a bug report, please include as many details as possible. How Do I Submit A (Good) Bug Report? Bugs are tracked as GitHub issues . Create an issue on the project's repository and provide the following information. Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. For example, start by explaining how you used the project. When listing steps, don't just say what you did, but explain how you did it . Provide specific examples to demonstrate the steps . It's always better to get more information. You can include links to files or GitHub projects, copy/pasteable snippets or even print screens or animated GIFS. If you're providing snippets in the issue, use Markdown code blocks . Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. If the problem wasn't triggered by a specific action , describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version) or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Include details about your configuration and environment: Which version of the project are you using? What's the name and version of the OS you're using ? Any other information that could be useful about you environment Suggesting Enhancements This section guides you through submitting an enhancement suggestion for this project, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion and find related suggestions. Before creating enhancement suggestions, please check the list of enhancements suggestions in the issue tracker as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible. How Do I Submit A (Good) Enhancement Suggestion? Enhancement suggestions are tracked as GitHub issues . Create an issue on the project's repository and provide the following information: Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps . It's always better to get more information. You can include links to files or GitHub projects, copy/pasteable snippets or even print screens or animated GIFS. If you're providing snippets in the issue, use Markdown code blocks . Describe the current behavior and explain which behavior you expected to see instead and why. List some other similar projects where this enhancement exists. Specify which version of the project you're using. Specify the current environment you're using. if this is a useful information. Creating Pull Requests How Do I Submit A (Good) Pull Request? Be warned that the contributors agreement displayed on top of this document is applicable as soon as you create a pull request . Use a clear and descriptive title for the pull request to state the improvement you made to the code or the bug you solved. Provide a link to the related issue if the pull request is a follow up of an existing bug report or enhancement suggestion. Comment why this pull request represents an enhancement and give a rationale explaining why you did it that way and not another way. Use the same coding style than the one used in this project . Welcome suggestions from the maintainers to improve your pull request .","title":"Contributions"},{"location":"CONTRIBUTING/#contributing-to-this-project","text":"Contributors Agreement Introduction I don't want to read this whole thing I just have a question!!! How Can I Contribute? Reporting Bugs Suggesting Enhancements Creating Pull Requests","title":"Contributing to this project"},{"location":"CONTRIBUTING/#contributors-agreement","text":"By submitting patches to this project you agree to allow them to be redistributed under the project's license, according to the normal forms and usages of the open-source community.","title":"Contributors Agreement"},{"location":"CONTRIBUTING/#introduction","text":"First off, thank you for considering contributing to this project. It's people like you that make it such a great tool. Following these guidelines helps to communicate that you respect the time of the developers managing and developing this open source project. In return, they should reciprocate that respect in addressing your issue, assessing changes, and helping you finalize your pull requests. This is an open source project and we love to receive contributions from our community \u2014 you! There are many ways to contribute, from writing tutorials or blog posts, improving the documentation, submitting bug reports and feature requests or writing code which can be incorporated into the main project itself.","title":"Introduction"},{"location":"CONTRIBUTING/#i-dont-want-to-read-this-whole-thing-i-just-have-a-question","text":"We currently allow our users to use the issue tracker for support questions. But please be wary that maintaining an open source project can take a lot of time from the maintainers. If asking for a support question, state it clearly and take the time to explain your problem properly. Also, if your problem is not strictly related to this project we recommend you to use Stack Overlow instead.","title":"I don't want to read this whole thing I just have a question!!!"},{"location":"CONTRIBUTING/#how-can-i-contribute","text":"","title":"How Can I Contribute?"},{"location":"CONTRIBUTING/#reporting-bugs","text":"Before creating bug reports, please check the existing bug reports as you might find out that you don't need to create one. When you are creating a bug report, please include as many details as possible.","title":"Reporting Bugs"},{"location":"CONTRIBUTING/#how-do-i-submit-a-good-bug-report","text":"Bugs are tracked as GitHub issues . Create an issue on the project's repository and provide the following information. Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. For example, start by explaining how you used the project. When listing steps, don't just say what you did, but explain how you did it . Provide specific examples to demonstrate the steps . It's always better to get more information. You can include links to files or GitHub projects, copy/pasteable snippets or even print screens or animated GIFS. If you're providing snippets in the issue, use Markdown code blocks . Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. If the problem wasn't triggered by a specific action , describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version) or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Include details about your configuration and environment: Which version of the project are you using? What's the name and version of the OS you're using ? Any other information that could be useful about you environment","title":"How Do I Submit A (Good) Bug Report?"},{"location":"CONTRIBUTING/#suggesting-enhancements","text":"This section guides you through submitting an enhancement suggestion for this project, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion and find related suggestions. Before creating enhancement suggestions, please check the list of enhancements suggestions in the issue tracker as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible.","title":"Suggesting Enhancements"},{"location":"CONTRIBUTING/#how-do-i-submit-a-good-enhancement-suggestion","text":"Enhancement suggestions are tracked as GitHub issues . Create an issue on the project's repository and provide the following information: Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps . It's always better to get more information. You can include links to files or GitHub projects, copy/pasteable snippets or even print screens or animated GIFS. If you're providing snippets in the issue, use Markdown code blocks . Describe the current behavior and explain which behavior you expected to see instead and why. List some other similar projects where this enhancement exists. Specify which version of the project you're using. Specify the current environment you're using. if this is a useful information.","title":"How Do I Submit A (Good) Enhancement Suggestion?"},{"location":"CONTRIBUTING/#creating-pull-requests","text":"","title":"Creating Pull Requests"},{"location":"CONTRIBUTING/#how-do-i-submit-a-good-pull-request","text":"Be warned that the contributors agreement displayed on top of this document is applicable as soon as you create a pull request . Use a clear and descriptive title for the pull request to state the improvement you made to the code or the bug you solved. Provide a link to the related issue if the pull request is a follow up of an existing bug report or enhancement suggestion. Comment why this pull request represents an enhancement and give a rationale explaining why you did it that way and not another way. Use the same coding style than the one used in this project . Welcome suggestions from the maintainers to improve your pull request .","title":"How Do I Submit A (Good) Pull Request?"},{"location":"LICENSE/","text":"Licensing information MIT License Copyright (c) 2018 Nicolas Vanhoren Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"LICENSE/#licensing-information","text":"MIT License Copyright (c) 2018 Nicolas Vanhoren Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licensing information"},{"location":"RELEASE_NOTES/","text":"","title":"Release notes"},{"location":"about/","text":"","title":"About"},{"location":"data_pipelines/","text":"","title":"Intelligent Data Pipelines"},{"location":"lid/","text":"","title":"Language Identification Model"},{"location":"smart_crawlers/","text":"Table of Contents About the Project Built With Getting Started Prerequisites Installation Usage Setting credentials for Google cloud bucket Bucket configuration Metadata file configurations Youtube download configurations Web Crawl Configuraton Adding new spider Running spiders with appropriate pipeline Additional services Selenium google crawler Selenium youtube crawler Contributing License Contact Acknowledgements About The Project This is downloading framework that is extensible and allows the user to add new source without much code changes. For each new source user need to write a scrapy spider script and rest of downloading and meta file creation is handled by repective pipelines. And if required user can add their custom pipelines. This framework automatically transfer the downloaded data to a Google cloud bucket automatically. For more info on writing scrapy spider and pipeline one can refer to the documentation . Built With We have used scrapy as the base of this framework. * Scrapy Getting Started To get started install the prerequisites and clone the repo to machine on which you wish to run the framework. Prerequisites ffmpeg Any linux based (preferred Ubuntu) sudo apt-get install ffmpeg Mac-ox brew install ffmpeg Supported Python Version = 3.6 Windows user can follow installation steps on https://www.ffmpeg.org Installation Clone the repo git clone https://github.com/Open-Speech-EkStep/data-acquisition-pipeline.git Install python requirements pip install -r requirements.txt Usage This framework allows the user to download the media file from a websource(youtube, xyz.com, etc) and creates the respective metadata file from the data that is extracted from the file.For using any added source or to add new source refer to steps below.It can also crawl internet for media of a specific language. For web crawling, refer to the web crawl configuration below. Common configuration steps: Setting credentials for Google cloud bucket You can set credentials for Google cloud bucket in the credentials.json add the credentials in given manner ```shell script {\"Credentials\":{ YOUR ACCOUNT CREDENTIAL KEYS }} #### Bucket configuration Bucket configurations for data transfer in [storage_config.json](https://github.com/Open-Speech-EkStep/data-acquisition-pipeline/blob/master/data_acquisition_framework/configs/storage_config.json) ```shell script \"bucket\": \"ekstepspeechrecognition-dev\", Your bucket name \"channel_blob_path\": \"scrapydump/refactor_test\", Path to directory where downloaded files is to be stored \"archive_blob_path\": \"archive\", Folder name in which history of download is to be maintained \"scraped_data_blob_path\": \"scraped\" Folder name in which CSV for youtube file mode is stored Note: 1. Both archive_blob_path and scraped_data_blob_path should be present in channel_blob_path. 2. The CSV file used in file mode of youtube, It\\'s name must be same as source_name given above. 3. (only for datacollector_urls and datacollector_bing spiders) To autoconfigure language parameter to channel_blob_path from web_crawler_config.json, use <language> in channel_blob_path. \"eg: for tamil : data/download/<language>/audio - this will replace <language> with tamil.\" Metadata file configurations Metadata file configurations in config.json ```shell script mode: 'complete' This should not be changed audio_id: null If you want to give a custom audio id add here cleaned_duration: null If you know the cleaned duration of audio add here num_of_speakers: null Number of speaker present in audio language: Hindi Language of audio has_other_audio_signature: False If audio has multiple speaker in same file (True/False) type: 'audio' Type of media (audio or video) source: 'Demo_Source' Source name experiment_use: False If its for experimental use (True/False) utterances_files_list: null source_website: '' Source website url experiment_name: null Name of experiment if experiment_use is True mother_tongue: null Accent of language(Bengali, Marathi, etc...) age_group: null Age group of speaker in audio recorded_state: null State in which audio is recorded recorded_district: null District of state in which audio is recorded recorded_place: null Recording location recorded_date: null Recording date purpose: null Purpose of recording speaker_gender: null Gender of speaker speaker_name: null Name of speaker Note: 1. If any of the field info is not available keep its value to null 2. If speaker_name or speaker_gender is given then that same will be used for all the files in given source #### Youtube download configurations * You can set download mode [file/channel] in [youtube_pipeline_config.py](https://github.com/Open-Speech-EkStep/data-acquisition-pipeline/blob/master/data_acquisition_framework/configs/youtube_pipeline_config.py) ```shell script mode = 'file' # [channel,file] In file mode you will store a csv file whose name must be same as source name in scraped_data_blob_path. csv must contain urls of youtube videos, speaker name and gender as three different columns. Urls is a must field. You can leave speaker name and gender blank if data is not available. Given below is the structure of csv. ```shell script video_url,speaker_name,speaker_gender https://www.youtube.com/watch?v=K1vW_ZikA5o,Ram_Singh,male https://www.youtube.com/watch?v=o82HIOgozi8,John_Doe,male ... * common configurations in [youtube_pipeline_config.py](https://github.com/Open-Speech-EkStep/data-acquisition-pipeline/blob/master/data_acquisition_framework/configs/youtube_pipeline_config.py) ```shell script # Common configurations \"source_name\": \"DEMO\", This is the name of source you are downloading batch_num = 1 Number of videos to be downloaded as batches file mode configurations in youtube_pipeline_config.py ```shell script File Mode configurations file_speaker_gender_column = 'speaker_gender' Gender column name in csv file file_speaker_name_column = \"speaker_name\" Speaker name column name in csv file file_url_name_column = \"video_url\" Video url column name in csv file * channel mode configuration in [youtube_pipeline_config.py](https://github.com/Open-Speech-EkStep/data-acquisition-pipeline/blob/youtube/crawler/data_acquisition_framework/configs/youtube_pipeline_config.py) ```shell script # Channel mode configurations channel_url_dict = {} Channel url dictionary (This will download all the videos from the given channels with corresponding source names) match_title_string = '' REGEX Download only matching titles (regex or caseless sub-string) reject_title_string = '' REGEX Skip download for matching titles (regex or caseless sub-string) Note: 1. In channel_url_dict, the keys must be the urls and values must be their channel names 2. To get list of channels from youtube API, channel_url_dict must be empty Youtube API configuration Automated Youtube fetching configuration in youtube_api_config.json ```shell script Youtube API configurations \"language\" : \"hindi\", Type of language for which search results are required. \"language_code\": \"hi\", Language code for the specified language. \"keywords\":[ The search keywords to be given in youtube API query \"audio\", \"speech\", \"talk\" ], \"words_to_ignore\":[ The words that are to be ignored in youtube API query \"song\", \"music\" ], \"max_results\": 20 Maximum number of channels or results that is required. #### Web Crawl Configuration * web crawl configuration in [web_crawl_config.json](https://github.com/Open-Speech-EkStep/data-acquisition-pipeline/blob/master/data_acquisition_framework/configs/web_crawl_config.py) (Use this only for datacollector_bing and datacollector_urls spider) ```shell script \"language\": \"gujarati\", Language to be crawled \"language_code\": \"gu\", Language code for the specified language. \"keywords\": [ Keywords to query \"talks audio\", \"audiobooks\", \"speeches\", ], \"word_to_ignore\": [ Words to ignore while crawling \"ieeexplore.ieee.org\", \"dl.acm.org\", \"www.microsoft.com\" ], \"extensions_to_ignore\": [ Formats/extensions to ignore while crawling \".jpeg\", \"xlsx\", \".xml\" ], \"extensions_to_include\": [ Formats/extensions to include while crawling \".mp3\", \".wav\", \".mp4\", ], \"pages\": 1, Number of pages to crawl \"depth\": 1, Nesting depth for each website \"continue_page\": \"NO\", Field to continue/resume crawling \"last_visited\": 200, Last visited results count \"enable_hours_restriction\": \"YES\", Restrict crawling based on hours of data collected \"max_hours\": 1 Maximum hours to crawl Adding new spider As we already mentioned our framework is extensible for any new source. To add a new source user just need to write a spider for that source. To add a spider you can follow the scrapy documentation or you can check our sample spider. Running spiders with appropriate pipeline Starting youtube spider with YoutubeApi pipeline. Add youtube search api key in .youtube_api_key file in project root. ```shell script scrapy crawl datacollector_youtube --set=ITEM_PIPELINES='{\"data_acquisition_framework.pipelines.youtube_api_pipeline.YoutubeApiPipeline\": 1}' * Starting datacollector_bing spider with audio pipeline. ```shell script scrapy crawl datacollector_bing Starting datacollector_urls spider with audio pipeline. Make sure to put the urls to crawl in the data_acquisition_framework/urls.txt shell script scrapy crawl datacollector_urls Additional Services Selenium google crawler It is capable of crawling search results of google for a given language and exporting them to urls.txt file. This urls.txt file can be used with datacollector_urls spider to crawl all the search results website and download the media along with their metadata. A specified Readme can be found in selenium_google_crawler folder. Readme for selenium google crawler Selenium youtube crawler It is capable of crawling youtube videos using youtube api or from a list of files with youtube video ids provided with channel name as filename. A specified Readme can be found in selenium_youtube_crawler folder. Readme for selenium youtube crawler Contributing Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated . Fork the Project Create your Feature Branch ( git checkout -b feature/AmazingFeature ) Commit your Changes ( git commit -m 'Add some AmazingFeature' ) Push to the Branch ( git push origin feature/AmazingFeature ) Open a Pull Request License Distributed under the [XYZ] License. See LICENSE for more information. Contact Your Name - @your_twitter - email@example.com Project Link: https://github.com/your_username/repo_name Acknowledgements Scrapy YouTube-dl TinyTag","title":"Smart Crawlers"},{"location":"smart_crawlers/#table-of-contents","text":"About the Project Built With Getting Started Prerequisites Installation Usage Setting credentials for Google cloud bucket Bucket configuration Metadata file configurations Youtube download configurations Web Crawl Configuraton Adding new spider Running spiders with appropriate pipeline Additional services Selenium google crawler Selenium youtube crawler Contributing License Contact Acknowledgements","title":"Table of Contents"},{"location":"smart_crawlers/#about-the-project","text":"This is downloading framework that is extensible and allows the user to add new source without much code changes. For each new source user need to write a scrapy spider script and rest of downloading and meta file creation is handled by repective pipelines. And if required user can add their custom pipelines. This framework automatically transfer the downloaded data to a Google cloud bucket automatically. For more info on writing scrapy spider and pipeline one can refer to the documentation .","title":"About The Project"},{"location":"smart_crawlers/#built-with","text":"We have used scrapy as the base of this framework. * Scrapy","title":"Built With"},{"location":"smart_crawlers/#getting-started","text":"To get started install the prerequisites and clone the repo to machine on which you wish to run the framework.","title":"Getting Started"},{"location":"smart_crawlers/#prerequisites","text":"ffmpeg Any linux based (preferred Ubuntu) sudo apt-get install ffmpeg Mac-ox brew install ffmpeg Supported Python Version = 3.6 Windows user can follow installation steps on https://www.ffmpeg.org","title":"Prerequisites"},{"location":"smart_crawlers/#installation","text":"Clone the repo git clone https://github.com/Open-Speech-EkStep/data-acquisition-pipeline.git Install python requirements pip install -r requirements.txt","title":"Installation"},{"location":"smart_crawlers/#usage","text":"This framework allows the user to download the media file from a websource(youtube, xyz.com, etc) and creates the respective metadata file from the data that is extracted from the file.For using any added source or to add new source refer to steps below.It can also crawl internet for media of a specific language. For web crawling, refer to the web crawl configuration below.","title":"Usage"},{"location":"smart_crawlers/#common-configuration-steps","text":"","title":"Common configuration steps:"},{"location":"smart_crawlers/#setting-credentials-for-google-cloud-bucket","text":"You can set credentials for Google cloud bucket in the credentials.json add the credentials in given manner ```shell script {\"Credentials\":{ YOUR ACCOUNT CREDENTIAL KEYS }} #### Bucket configuration Bucket configurations for data transfer in [storage_config.json](https://github.com/Open-Speech-EkStep/data-acquisition-pipeline/blob/master/data_acquisition_framework/configs/storage_config.json) ```shell script \"bucket\": \"ekstepspeechrecognition-dev\", Your bucket name \"channel_blob_path\": \"scrapydump/refactor_test\", Path to directory where downloaded files is to be stored \"archive_blob_path\": \"archive\", Folder name in which history of download is to be maintained \"scraped_data_blob_path\": \"scraped\" Folder name in which CSV for youtube file mode is stored Note: 1. Both archive_blob_path and scraped_data_blob_path should be present in channel_blob_path. 2. The CSV file used in file mode of youtube, It\\'s name must be same as source_name given above. 3. (only for datacollector_urls and datacollector_bing spiders) To autoconfigure language parameter to channel_blob_path from web_crawler_config.json, use <language> in channel_blob_path. \"eg: for tamil : data/download/<language>/audio - this will replace <language> with tamil.\"","title":"Setting credentials for Google cloud bucket"},{"location":"smart_crawlers/#metadata-file-configurations","text":"Metadata file configurations in config.json ```shell script mode: 'complete' This should not be changed audio_id: null If you want to give a custom audio id add here cleaned_duration: null If you know the cleaned duration of audio add here num_of_speakers: null Number of speaker present in audio language: Hindi Language of audio has_other_audio_signature: False If audio has multiple speaker in same file (True/False) type: 'audio' Type of media (audio or video) source: 'Demo_Source' Source name experiment_use: False If its for experimental use (True/False) utterances_files_list: null source_website: '' Source website url experiment_name: null Name of experiment if experiment_use is True mother_tongue: null Accent of language(Bengali, Marathi, etc...) age_group: null Age group of speaker in audio recorded_state: null State in which audio is recorded recorded_district: null District of state in which audio is recorded recorded_place: null Recording location recorded_date: null Recording date purpose: null Purpose of recording speaker_gender: null Gender of speaker speaker_name: null Name of speaker Note: 1. If any of the field info is not available keep its value to null 2. If speaker_name or speaker_gender is given then that same will be used for all the files in given source #### Youtube download configurations * You can set download mode [file/channel] in [youtube_pipeline_config.py](https://github.com/Open-Speech-EkStep/data-acquisition-pipeline/blob/master/data_acquisition_framework/configs/youtube_pipeline_config.py) ```shell script mode = 'file' # [channel,file] In file mode you will store a csv file whose name must be same as source name in scraped_data_blob_path. csv must contain urls of youtube videos, speaker name and gender as three different columns. Urls is a must field. You can leave speaker name and gender blank if data is not available. Given below is the structure of csv. ```shell script video_url,speaker_name,speaker_gender https://www.youtube.com/watch?v=K1vW_ZikA5o,Ram_Singh,male https://www.youtube.com/watch?v=o82HIOgozi8,John_Doe,male ... * common configurations in [youtube_pipeline_config.py](https://github.com/Open-Speech-EkStep/data-acquisition-pipeline/blob/master/data_acquisition_framework/configs/youtube_pipeline_config.py) ```shell script # Common configurations \"source_name\": \"DEMO\", This is the name of source you are downloading batch_num = 1 Number of videos to be downloaded as batches file mode configurations in youtube_pipeline_config.py ```shell script","title":"Metadata file configurations"},{"location":"smart_crawlers/#file-mode-configurations","text":"file_speaker_gender_column = 'speaker_gender' Gender column name in csv file file_speaker_name_column = \"speaker_name\" Speaker name column name in csv file file_url_name_column = \"video_url\" Video url column name in csv file * channel mode configuration in [youtube_pipeline_config.py](https://github.com/Open-Speech-EkStep/data-acquisition-pipeline/blob/youtube/crawler/data_acquisition_framework/configs/youtube_pipeline_config.py) ```shell script # Channel mode configurations channel_url_dict = {} Channel url dictionary (This will download all the videos from the given channels with corresponding source names) match_title_string = '' REGEX Download only matching titles (regex or caseless sub-string) reject_title_string = '' REGEX Skip download for matching titles (regex or caseless sub-string) Note: 1. In channel_url_dict, the keys must be the urls and values must be their channel names 2. To get list of channels from youtube API, channel_url_dict must be empty","title":"File Mode configurations"},{"location":"smart_crawlers/#youtube-api-configuration","text":"Automated Youtube fetching configuration in youtube_api_config.json ```shell script","title":"Youtube API configuration"},{"location":"smart_crawlers/#youtube-api-configurations","text":"\"language\" : \"hindi\", Type of language for which search results are required. \"language_code\": \"hi\", Language code for the specified language. \"keywords\":[ The search keywords to be given in youtube API query \"audio\", \"speech\", \"talk\" ], \"words_to_ignore\":[ The words that are to be ignored in youtube API query \"song\", \"music\" ], \"max_results\": 20 Maximum number of channels or results that is required. #### Web Crawl Configuration * web crawl configuration in [web_crawl_config.json](https://github.com/Open-Speech-EkStep/data-acquisition-pipeline/blob/master/data_acquisition_framework/configs/web_crawl_config.py) (Use this only for datacollector_bing and datacollector_urls spider) ```shell script \"language\": \"gujarati\", Language to be crawled \"language_code\": \"gu\", Language code for the specified language. \"keywords\": [ Keywords to query \"talks audio\", \"audiobooks\", \"speeches\", ], \"word_to_ignore\": [ Words to ignore while crawling \"ieeexplore.ieee.org\", \"dl.acm.org\", \"www.microsoft.com\" ], \"extensions_to_ignore\": [ Formats/extensions to ignore while crawling \".jpeg\", \"xlsx\", \".xml\" ], \"extensions_to_include\": [ Formats/extensions to include while crawling \".mp3\", \".wav\", \".mp4\", ], \"pages\": 1, Number of pages to crawl \"depth\": 1, Nesting depth for each website \"continue_page\": \"NO\", Field to continue/resume crawling \"last_visited\": 200, Last visited results count \"enable_hours_restriction\": \"YES\", Restrict crawling based on hours of data collected \"max_hours\": 1 Maximum hours to crawl","title":"Youtube API configurations"},{"location":"smart_crawlers/#adding-new-spider","text":"As we already mentioned our framework is extensible for any new source. To add a new source user just need to write a spider for that source. To add a spider you can follow the scrapy documentation or you can check our sample spider.","title":"Adding new spider"},{"location":"smart_crawlers/#running-spiders-with-appropriate-pipeline","text":"Starting youtube spider with YoutubeApi pipeline. Add youtube search api key in .youtube_api_key file in project root. ```shell script scrapy crawl datacollector_youtube --set=ITEM_PIPELINES='{\"data_acquisition_framework.pipelines.youtube_api_pipeline.YoutubeApiPipeline\": 1}' * Starting datacollector_bing spider with audio pipeline. ```shell script scrapy crawl datacollector_bing Starting datacollector_urls spider with audio pipeline. Make sure to put the urls to crawl in the data_acquisition_framework/urls.txt shell script scrapy crawl datacollector_urls","title":"Running spiders with appropriate pipeline"},{"location":"smart_crawlers/#additional-services","text":"","title":"Additional Services"},{"location":"smart_crawlers/#selenium-google-crawler","text":"It is capable of crawling search results of google for a given language and exporting them to urls.txt file. This urls.txt file can be used with datacollector_urls spider to crawl all the search results website and download the media along with their metadata. A specified Readme can be found in selenium_google_crawler folder. Readme for selenium google crawler","title":"Selenium google crawler"},{"location":"smart_crawlers/#selenium-youtube-crawler","text":"It is capable of crawling youtube videos using youtube api or from a list of files with youtube video ids provided with channel name as filename. A specified Readme can be found in selenium_youtube_crawler folder. Readme for selenium youtube crawler","title":"Selenium youtube crawler"},{"location":"smart_crawlers/#contributing","text":"Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated . Fork the Project Create your Feature Branch ( git checkout -b feature/AmazingFeature ) Commit your Changes ( git commit -m 'Add some AmazingFeature' ) Push to the Branch ( git push origin feature/AmazingFeature ) Open a Pull Request","title":"Contributing"},{"location":"smart_crawlers/#license","text":"Distributed under the [XYZ] License. See LICENSE for more information.","title":"License"},{"location":"smart_crawlers/#contact","text":"Your Name - @your_twitter - email@example.com Project Link: https://github.com/your_username/repo_name","title":"Contact"},{"location":"smart_crawlers/#acknowledgements","text":"Scrapy YouTube-dl TinyTag","title":"Acknowledgements"}]}